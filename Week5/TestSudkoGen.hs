{-- 
Test report:
testGenSuds 20
"pass on: "
+-------+-------+-------+
|     9 | 3     |       |
|     2 |   6 5 | 1     |
|       |   1 7 |     5 |
+-------+-------+-------+
|       |       |   1   |
| 9 2   |       | 6     |
|   6   |       | 3   2 |
+-------+-------+-------+
| 6     |   7 8 |       |
| 8     | 1     |   7 9 |
|       |       |     3 |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|       | 7     |   8   |
| 3     | 6     | 4     |
| 8     |   2 3 |   7 9 |
+-------+-------+-------+
|     8 |     6 | 7     |
|       | 8     | 1 3   |
|   9   | 3     | 6     |
+-------+-------+-------+
|     2 |       |       |
|     6 |       | 9     |
| 5     |     1 |     4 |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|       |     1 |   7   |
|   6   |   7   |     3 |
|   4   |   2   | 6 9   |
+-------+-------+-------+
| 4   8 | 5     | 9     |
|   5 3 | 9     | 1     |
|   9   | 4     |   3   |
+-------+-------+-------+
|       |       | 3     |
|     5 |       |   8   |
|     4 | 7 8   |   5   |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|       | 6     |   9 1 |
|       |   2   |       |
|       | 7   4 | 6     |
+-------+-------+-------+
| 6   9 | 5     |       |
| 5     |       | 8     |
|     2 |       |     5 |
+-------+-------+-------+
|       | 4 5 9 | 3     |
|   7 1 |       |   2   |
|     5 |     7 |     8 |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|   9   |       | 4 7 1 |
| 6   8 |       |       |
|       | 4     |       |
+-------+-------+-------+
| 2     |   7   |       |
| 1     |     9 |     8 |
|   5   | 2 3   |       |
+-------+-------+-------+
|     2 |   9   |       |
|       |     2 | 8   4 |
| 5 3   |       |     7 |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
| 5     |   2 1 | 4     |
|       |     5 | 1     |
|   8   |     6 |   5   |
+-------+-------+-------+
| 6 1   |       |       |
|     3 | 5     |     6 |
|     7 |       |       |
+-------+-------+-------+
| 1     | 8     | 7     |
|       | 7 6 3 |   4   |
| 8     |   9   |       |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|       |   3 8 | 9     |
|   4   | 6 5   |       |
|   2   |       | 4 6   |
+-------+-------+-------+
|       |     9 |       |
|       |   6   |   3   |
| 7     |       |     6 |
+-------+-------+-------+
|   9 7 | 8     |   4   |
| 2     |   7 5 |   9   |
|     3 |       |   2 1 |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|       |       | 4     |
|       |   1   |     2 |
| 4 5 3 | 2     | 8     |
+-------+-------+-------+
|   3 6 |       |   2   |
| 2     | 9   1 |   7 6 |
|       |       |     4 |
+-------+-------+-------+
|   2   |     8 | 7 9   |
|   7   |   5   |     3 |
|     9 |   4   |       |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|       | 1     | 5     |
|     2 | 8     |     1 |
| 4     | 7     |   8   |
+-------+-------+-------+
|       |     6 | 4   3 |
|   3 7 |       |       |
| 1 5   |   2   |       |
+-------+-------+-------+
|   7   |     9 | 3 6 5 |
| 5     |       |       |
| 2   6 |       | 1     |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|   2 3 |     7 | 4 9   |
|     9 |       |       |
|       |     6 | 2     |
+-------+-------+-------+
|   9   |       |   7   |
| 7   4 |   8   |     2 |
|   1   |       |     3 |
+-------+-------+-------+
|     1 | 3     |     4 |
|     8 |     9 |       |
|       | 5   2 |   3   |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|       |       |       |
| 3     | 4     |   6   |
| 5   9 |     6 |   7   |
+-------+-------+-------+
| 6     |     3 |     2 |
| 9     |       |       |
| 4 2   |   9   |     7 |
+-------+-------+-------+
|       |   1 9 |       |
| 2     |     7 | 1     |
|   1   | 6   2 | 5 4   |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|     4 |     1 |       |
| 5     |       |   2   |
| 1     |   7   |       |
+-------+-------+-------+
|       |       |     6 |
|   5   | 8     | 4   7 |
|     6 |   3   | 2     |
+-------+-------+-------+
|     3 | 7   8 |   5   |
|   6   |   2   | 3     |
|   7   |     5 |     4 |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
| 3     |   5   |   4 7 |
|   2   |       |       |
| 1     |       |     8 |
+-------+-------+-------+
|   8 5 |       |     9 |
| 9     | 4 7   | 3     |
|       | 5   1 |   2   |
+-------+-------+-------+
|     1 | 2   6 |     5 |
|       |       |   6   |
|   7   |   3   |       |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|     8 | 6 7   |     3 |
|       |   1 4 | 2     |
|       | 2     |       |
+-------+-------+-------+
| 6   2 | 8     |     9 |
| 8     |       | 1     |
|   9   |   5   |   2   |
+-------+-------+-------+
|       |       |       |
| 7 4 3 |     1 |       |
| 5   9 |   4   |   7   |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|   3 1 |       | 2 5   |
|       |       |       |
|       |   5   | 1   6 |
+-------+-------+-------+
| 6     | 4 2 3 |     7 |
| 2     |       |       |
|       |     6 |       |
+-------+-------+-------+
| 7     | 3 1 8 |       |
| 1   6 | 2     | 7     |
| 9     | 5     |       |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|   2 4 |     8 | 7   5 |
|       |   5   |       |
|     7 |   9   |   8 2 |
+-------+-------+-------+
|     8 |       |   7   |
| 9 5   |       |     3 |
| 3     |       | 2     |
+-------+-------+-------+
|       |     5 |     8 |
| 1 6   |       | 3 4   |
| 7     | 3     |       |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
| 1     | 7   4 | 8   2 |
| 5   6 |       |   4   |
|     8 |     2 |   3   |
+-------+-------+-------+
| 2     |       | 9     |
|   4 5 | 3     |       |
| 8 3 1 |       | 5     |
+-------+-------+-------+
|       |       |       |
|       | 2     |   9   |
|       |   6 8 | 3     |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|       |   3   |       |
|     7 | 1   5 | 6     |
| 3   4 |     8 |     2 |
+-------+-------+-------+
| 2   8 | 6     |       |
|     5 | 8 1   | 3     |
| 7     |     3 |   2   |
+-------+-------+-------+
| 6     |       |   9   |
|       | 2   9 | 7   8 |
|   8   |       |     5 |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
|       |     7 |     8 |
|   6   | 9   4 |   5   |
|   3   | 5     | 9 6   |
+-------+-------+-------+
|     5 | 2     |     7 |
| 3     |       |   2 4 |
|       | 6   9 |       |
+-------+-------+-------+
| 1     |   3   |       |
|       |       |       |
| 7   2 |   5   | 3     |
+-------+-------+-------+
"pass on: "
+-------+-------+-------+
| 4     |       | 3 9   |
|       |     1 |       |
|       |   9   | 7     |
+-------+-------+-------+
|   5 3 |     4 | 6     |
|     4 |     5 |   1   |
| 1     |     6 |     7 |
+-------+-------+-------+
|     7 |       | 5     |
| 3   5 |   7   |   2   |
|       | 3   2 |     6 |
+-------+-------+-------+

Time spent: Approx 3 Hr
--}

{-# OPTIONS_GHC -Wall #-}
module TestSudokuGen where
    
import Lecture5

-- Definitions for coordinates; combinations or row and column
type Coord  = (Row, Column)
type Coords = [Coord]

-- All possible coordinates [(1,1) .. (9,9)]
allCoords :: Coords
allCoords = [ (r,c) | r <- positions, c <- positions ]


-- Remove a single coordinate from the sudoku 
dropCoord :: Sudoku -> (Row, Column) -> Sudoku
dropCoord s (r,c) = if r'==r && c'==c then 0 else s (r,c)

-- Check if a Sudoku has multiple solutions
multSol :: Sudoku -> Bool
multSol s = let node = (s, constraints s) in
    length (solveNs [node]) > 1
    
{-- 
This function generates all possible soduko's that can be 
generated by dropping one hint from the original sudoku.
Subsequently the function checks if none of the generated
sudokus has a single solution
--}
allSubsNU :: Sudoku -> Bool
allSubsNU s = all multSol (allSubs s) where
	allSubs s' = map (dropCoord s') (filter ((/= 0) . s') allCoords)


{--
The actual test function. Checks for a Node if it has a single
solution and if all sudoku's generatred by removing a single
hint from the original sudoku have multiple solutions
--}
isMinimal :: Node -> Bool
isMinimal (s,cs) = 
	length (solveNs [(s,cs)]) == 1 && allSubsNU s

{--
Test function. Copied from the assignment in week two. The function
used to print the test output is a little dodgy, but I got all
kinds of random compile errors trying to do it another way
--}

testGenSuds :: Int -> IO ()
testGenSuds n = testGenSuds' 0 n isMinimal
testGenSuds' :: Int -> Int -> (Node->Bool) -> IO ()
testGenSuds' k n f = if k == n then print (show n ++ " tests passed")
                else do
                  s <- genRandomSudoku
                  p <- genProblem s
                  if f p then
                    do showSud "pass on: " p
                       testGenSuds' (k+1) n f
                  else 
                      do 
                          showSud "failed test on: " p                    
                          error ""
						  
showSud :: String -> Node -> IO ()
showSud pre s = do
    print pre
    showNode s
	
